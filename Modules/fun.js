// Module Docs___________________________
// | Name: Fun
// | Type: MODULE
// | Function: Fun / Shitpost Commands
// |_____________________________________

const request = require('request');
const gif = require('giphy-api')('dc6zaTOxFJmzC'); //<= public api key

module.exports = {
    handler: function(message, command, params, config, data) {
        if (this.handles.indexOf(command) != -1) {
            if (command == "flip" || command == "coinflip") {
                this.flip(message);
            } else if (command == "eightball" || command == "8ball" || command == "ball") {
                this.eightball(message);
            } else if (command == "lenny" || command == "lennyface") {
                this.lenny(message);
            } else if (command == "urban" || command == "urbandict" || command == "urbandictionary") {
                this.urban(message, data, params);
            } else if (command == "giphy" || command == "gifr" || command == "gify") {
                this.giphy(message, data, params);
            }
        }
    },
    handles: ["flip", "coinflip", "eightball", "8ball", "ball", "lenny", "lennyface", "urban", "giphy", "gifr", "gify"],
    helpMessage: "**Fun commands**:\n `coinflip`: Flips a coin.\n `8ball` Ask the 8ball something.\n `lenny`: Gives a random lenny face.\n`urban`: Defines words from the Urban Dictionary\n",
    flip: function(message) {
        var resp = ["https://i.imgur.com/wIwZGxn.png", "https://i.imgur.com/pt3XnS0.png"];
        message.channel.sendFile("" + resp[Math.floor(Math.random() * resp.length)]);
    },
    eightball: function(message) {
        var resp = ["Yes!", "Yes...", "Yep!", "Definately", "Without a doubt!", "Absolutely!", "Uh...", "Well... You see...", "-silence-", "Ha.. ha.. no..", "Nope!", "Not happening!", "Well... no.", "No.", "In your dreams", "Uh.. not right now... please try again later."];
        message.channel.sendMessage("" + resp[Math.floor(Math.random() * resp.length)]);
    },
    lenny: function(message) {
        var responses = ["( Õ°¬∞ Õú ñ Õ°¬∞)", "¬Ø\\\_(„ÉÑ)_/¬Ø", "ÃøÃø ÃøÃø ÃøÃø Ãø'Ãø'\ÃµÕáÃøÃø\–∑= ( ‚ñÄ ÕúÕû ñ‚ñÄ) =Œµ/ÃµÕáÃøÃø/‚ÄôÃø‚ÄôÃø Ãø ÃøÃø ÃøÃø ÃøÃø", "‚ñÑÔ∏ªÃ∑Ãø‚îªÃø‚ïê‚îÅ‰∏Ä", "( Õ°¬∞( Õ°¬∞ Õú ñ( Õ°¬∞ Õú ñ Õ°¬∞) ñ Õ°¬∞) Õ°¬∞)", " ï‚Ä¢·¥•‚Ä¢ î", "(‚ñÄÃøƒπÃØ‚ñÄÃø Ãø)", "(‡∏á Õ†¬∞ ÕüŸÑÕú Õ°¬∞)‡∏á", "‡ºº „Å§ ‚óï_‚óï ‡ºΩ„Å§", "‡≤†_‡≤†", "(„Å•ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°)„Å•", "Ãø'Ãø'\ÃµÕáÃøÃø\–∑=( Õ†¬∞ Õü ñ Õ°¬∞)=Œµ/ÃµÕáÃøÃø/'ÃøÃø Ãø Ãø Ãø Ãø Ãø", "(Ôæâ‚óï„ÉÆ‚óï)Ôæâ*:ÔΩ•Ôæü‚úß ‚úß\nÔæüÔΩ•: *„ÉΩ(‚óï„ÉÆ‚óï„ÉΩ)", "[Ã≤ÃÖ$Ã≤ÃÖ(Ã≤ÃÖ5Ã≤ÃÖ)Ã≤ÃÖ$Ã≤ÃÖ]", "‚î¨‚î¥‚î¨‚î¥‚î§ Õú ñ Õ°¬∞) ‚îú‚î¨‚î¥‚î¨‚î¥", "( Õ°¬∞‚ï≠Õú ñ‚ïÆÕ°¬∞ )", "(Õ° Õ°¬∞ Õú „Å§ Õ°Õ°¬∞)", "(‚Ä¢ Œµ ‚Ä¢)", "(‡∏á'ÃÄ-'ÃÅ)‡∏á", "(‡≤•Ôπè‡≤•)", "Ô¥æÕ°‡πèÃØÕ°‡πèÔ¥ø O'RLY?", "(„Éé‡≤†Áõä‡≤†)„ÉéÂΩ°‚îª‚îÅ‚îª", "[Ã≤ÃÖ$Ã≤ÃÖ(Ã≤ÃÖ Õ°¬∞ Õú ñ Õ°¬∞Ã≤ÃÖ)Ã≤ÃÖ$Ã≤ÃÖ]", "(Ôæâ‚óï„ÉÆ‚óï)Ôæâ*:ÔΩ•Ôæü‚úß", "(‚òûÔæü‚àÄÔæü)‚òû", "| (‚Ä¢ ‚ó°‚Ä¢)| (‚ùç·¥•‚ùç ã)", "(‚óï‚Äø‚óï‚úø)", "(·µî·¥•·µî)", "(‚ïØ¬∞‚ñ°¬∞)‚ïØÔ∏µ\n  ûooq«ù…î…ê…ü", "(¬¨‚Äø¬¨)", "(‚òûÔæü„ÉÆÔæü)‚òû ‚òú(Ôæü„ÉÆÔæü‚òú)", "(„Å•Ôø£ ¬≥Ôø£)„Å•", "·Éö(‡≤†Áõä‡≤†·Éö)", "‡≤†‚ï≠‚ïÆ‡≤†", "Ãø Ãø Ãø'Ãø'\ÃµÕáÃøÃø\–∑=(‚Ä¢_‚Ä¢)=Œµ/ÃµÕáÃøÃø/'Ãø'Ãø Ãø", "\/‚ï≤/\‚ï≠( Õ°¬∞ Õ°¬∞ Õú ñ Õ°¬∞ Õ°¬∞)‚ïÆ/\‚ï±\\", "(;¬¥‡ºé‡∫∂–î‡ºé‡∫∂`)", "‚ô™~ ·ïï(·êõ)·ïó", "‚ô•‚Äø‚ô•", "‡ºº „Å§  Õ°¬∞ Õú ñ Õ°¬∞ ‡ºΩ„Å§", "‡ºº „Å§ ‡≤•_‡≤• ‡ºΩ„Å§", "(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª", "( Õ°·µî Õú ñ Õ°·µî )", "„Éæ(‚åê‚ñ†_‚ñ†)„Éé‚ô™", "~(Àò‚ñæÀò~)", "‚óâ_‚óâ", "\ (‚Ä¢‚ó°‚Ä¢) /", "\ (‚Ä¢‚ó°‚Ä¢) /", "(~Àò‚ñæÀò)~", "(._.) ( l: ) ( .-. ) ( :l ) (._.)", "‡ºº òÃöŸÑÕú òÃö‡ºΩ", "‡ºº ¬∫ŸÑÕü¬∫ ‡ºº ¬∫ŸÑÕü¬∫ ‡ºº ¬∫ŸÑÕü¬∫ ‡ºΩ ¬∫ŸÑÕü¬∫ ‡ºΩ ¬∫ŸÑÕü¬∫ ‡ºΩ", "‚î¨‚î¥‚î¨‚î¥‚î§(ÔΩ•_‚îú‚î¨‚î¥‚î¨‚î¥", "·ïô(‚áÄ‚Ä∏‚Üº‚Ä∂)·ïó", "·ï¶(√≤_√≥Àá)·ï§", "‚îª‚îÅ‚îª Ô∏µ„ÉΩ(`–î¬¥)ÔæâÔ∏µ ‚îª‚îÅ‚îª", "‚öÜ _ ‚öÜ", "(‚Ä¢_‚Ä¢) ( ‚Ä¢_‚Ä¢)>‚åê‚ñ†-‚ñ† (‚åê‚ñ†_‚ñ†)", "(ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°)", "‡≤•_‡≤•", "„ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ", "‚åê‚ï¶‚ï¶‚ïê‚îÄ", "(‚òû‡∫àŸÑÕú‡∫à)‚òû", "Àô‚ÄÜÕú üÀô", "‚òú(Àö‚ñΩÀö)‚òû", "(‚Ä¢œâ‚Ä¢)", "(‡∏á¬∞ŸÑÕú¬∞)‡∏á", "(ÔΩ°‚óï‚Äø‚óïÔΩ°)", "Ôºà‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ( .o.)", ":')", "‚î¨‚îÄ‚îÄ‚î¨ „Éé( „Çú-„Çú„Éé)", "(„Å£Àò⁄°ÀòœÇ)", "‡≤†‚å£‡≤†", "·Éö(¬¥⁄°`·Éö)", "(¬∞„É≠¬∞)‚òù", "ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°", "( ‡≤† Õú ñ‡≤∞‡≥É)", "‚ïö(‡≤†_‡≤†)=‚îê", "(‚îÄ‚Äø‚Äø‚îÄ)", "∆™(Àò‚å£Àò) É", "(Ôºõ‰∏Ä_‰∏Ä)", "(¬¨_¬¨)", "( ‚öÜ _ ‚öÜ )", "( ò·ó© ò')", "‚òú(‚åí‚ñΩ‚åí)‚òû", "ÔΩ°‚óï‚Äø‚óïÔΩ°", "¬Ø\(¬∞_o)/¬Ø", "( ò‚Äø ò)", "·Éö,·îë‚Ä¢Ô∫™ÕüÕ†‚Ä¢·îê.·Éö", "(¬¥„Éªœâ„Éª`)", "‡≤†~‡≤†", "(¬∞ Õ° Õú Õ° ñ Õ° ¬∞)", "‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)", "(¬¥„Éªœâ„Éª)„Å£Áî±", "‡≤†_‡≤•", "∆∏ÃµÃ°”úÃµÃ®ÃÑ∆∑", "(>·Éö)", "‡≤†‚Äø‚Üº", " ò‚Äø ò", "(·É¶Àò‚å£Àò·É¶)", "‡≤†o‡≤†", "‡≤∞_‡≤∞", "(‚ñ∞Àò‚ó°Àò‚ñ∞)", "‚óîÃØ‚óî", "‚óî ‚å£ ‚óî", "(‚úø¬¥‚Äø`)", "¬¨_¬¨", "ÿ®_ÿ®", "ÔΩ°„Çú(ÔΩÄ–î¬¥)„ÇúÔΩ°", "¬∞–î¬∞", "( Ôæü„ÉÆÔæü)", "‚î¨‚îÄ‚î¨Ôªø Ô∏µ /(.‚ñ°. Ôºâ", "Ÿ©‚óîÃØ‚óî€∂", "‚âß‚òâ_‚òâ‚â¶", "‚òº.‚òº", "^ÃÆ^", ">_>", "(/) (¬∞,,¬∞) (/)", "=U", "(ÔΩ•.‚ó§)"];
        message.channel.sendMessage("" + responses[Math.floor(Math.random() * responses.length)]);
    },
    urban: function(message, data, params) {
        var search = params.join(" ");
        if (search.length == 0) {
            message.channel.sendMessage("`" + data.prefix + "urban`: Defines words from the Urban Dictionary.\nUsage: `" + data.prefix + "urban <word to define>`");
        } else {
            var url = `http://api.urbandictionary.com/v0/define?term=${search}`
            request(url, (error, result, body) => {
                if (error) {
                    console.error(error);
                } else {
                    try {
                        var urban = JSON.parse(body);
                        var urbanEmbed = {
                            color: 15113758,
                            author: {
                                name: `Top definition for ${urban.list[0].word}`,
                                url: urban.list[0].permalink,
                                icon_url: "https://images.discordapp.net/.eJwFwVEOgyAMANC7cAA6YFDrbQgSNFNKaI0fy-6-977mnqdZza46ZAXYDik8NyvKM7dqG3M7ax6H2MIXZNVc9qt2FfAhBI-B8EURQ_SUwCfCRC6i80tySMsb7v7p_HQ7ejO_PwphIvs.kjWsAKclpyOeMTEoes0rz4fyFO4?width=300&height=300"
                            },
                            description: urban.list[0].definition,
                            fields: [{
                                    name: "Example",
                                    value: urban.list[0].example ? urban.list[0].example : "No Example",
                                    inline: false
                                },
                                {
                                    name: "üëç",
                                    value: urban.list[0].thumbs_up,
                                    inline: true
                                },
                                {
                                    name: "üëé",
                                    value: urban.list[0].thumbs_down,
                                    inline: true
                                },
                                {
                                    name: "Defined By",
                                    value: urban.list[0].author,
                                    inline: false
                                }
                            ],
                            thumbnail: {
                                url: "https://images.discordapp.net/.eJwFwVEOgyAMANC7cAA6YFDrbQgSNFNKaI0fy-6-977mnqdZza46ZAXYDik8NyvKM7dqG3M7ax6H2MIXZNVc9qt2FfAhBI-B8EURQ_SUwCfCRC6i80tySMsb7v7p_HQ7ejO_PwphIvs.kjWsAKclpyOeMTEoes0rz4fyFO4?width=300&height=300"
                            }
                        };
                        message.channel.sendEmbed(urbanEmbed);
                    } catch (error) {
                        console.log("ERROR ON URBAN GIT FUCKING GUD\n" + error.message);
                        message.channel.sendEmbed({
                            title: "¬Ø\\\_(„ÉÑ)_/¬Ø",
                            description: `There isn't a definition for *${search}* yet.`,
                            color: 15113758
                        });
                    }
                }
            });
        }
    },
    giphy: function(message, data, params) {
        var search = params.join(" ");
        if (search.length == 0) {
            message.channel.sendMessage("`" + data.prefix + "giphy`: Gets gifs from Giphy\nUsage: `" + data.prefix + "giphy <term to search>`");
        } else {
            gif.search({
                q: search,
                limit: 1
            }, function(err, res) {
                try {
                    var giphyEmbed = new data.Discord.RichEmbed()
                        .setImage(`https://media.giphy.com/media/${res.data[0].id}/giphy.gif` ? `https://media.giphy.com/media/${res.data[0].id}/giphy.gif` : `https://media.giphy.com/media/${res.data[0].id}/giphy.mp4`)
                        .setFooter("Powered by Giphy")
                        .setColor(15113758);
                    message.channel.sendEmbed(giphyEmbed);
                } catch (error) {
                    console.log("Error on giphy\n" + error);
                    message.channel.sendEmbed({
                        title: "¬Ø\\\_(„ÉÑ)_/¬Ø",
                        description: `I couldn't find any gifs matching *${search}*`,
                        color: 15113758
                    });
                }
            });
        }
    }
}
